https://react-bootstrap.github.io/getting-started.html

============================================

npm install -g create-react-app
C:\Users\QUOC CUONG\AppData\Roaming\npm\node_modules\create-react-app\node_modules

Success! Created countdownchamp at Z:\react\countdownchamp
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can't go back!

We suggest that you begin by typing:

  cd countdownchamp
  npm start

Happy hacking!

Npm is a package manager for node modules. Node modules are packages of javascript code that help applications run.
 There's probably alternatives, but the command line is the quickest way to set up a project. As you continue to explore programming, you'll find the command line to be not just useful, but necessary.
 
============================================
Lecture 11- Creating your first component
Q&A
Hi. Why is Component imported in curly brackets?
 
The Component is imported in curly brackets because it's not the default class for the 'react' module.
React is the default module. However, it's still exported from the same file location. When it's not the default class, but still exported, we can access it through curly brackets.

============================================
Coding Break: Updating State
Section 2, Lecture 18

Coding Break: Updating State

How about a short coding break? Grab some tea if you’d like. Or just skip to the next video to keep developing countdownChamp!

However, let’s take a moment to think about React state. Now that we have state introduced, let’s lay down the law on how to properly update state without breaking your awesome applications.

The golden rule of React: never mutate state directly. I can’t repeat this enough. In order to change your state data, you can’t manipulate it like you would with normal variables. For example, something like `x++` or `counter += 1` would be fine in any other case. But in order to update state, you must use the setState() function and have new instances of data.

It’s one of those rules that will become more clear as you continue building applications.

So which state in the United States has laws that you can’t update directly?

The React State.

Thank you, I’ll be here all night :)

Let’s keep coding!

============================================

Summary and Challenges
Section 2, Lecture 23

Countdown Champ

Congratulations on finishing countdown champ! You just built your first app with React JS. Here’s an overview of the important concepts that you just learned:

    React Components - re-usable and independent pieces of React code that comprise the User Interface.

    ES6 importing and exporting - a new syntax for sharing code between separate files. Used in cases like `import React from ‘react’`

    State - the pertinent data to an application. Each component has its local state as long as you declare add the constructor to a Component and declare its state object.

    Updating State - When updating state, make sure to never mutate state directly. Doing so will lead to fatal errors in your application. Instead, re-declare new instances of state arrays or objects and use the setState() function to update state.

    Props - similar to state, except this data inherits from parent component specifying pieces of state as properties.

    LifeCycle Methods - events in React components that trigger in cases such as rendering on or off the screen, or during state updates. One example is the `componentDidMount()` lifeCycle hook.

Now, how about testing yourself and tackling a challenge or two?

Challenges:

    Make a separate component that works like a stopwatch. The user inputs the amount of time for the clock to run, and it starts counting down to 0.

    Add an alert message that pops up when the timer counts down to 0.
    Try running `npm build` for a build version and host the code on your website or any other host!
	
	November 25 2017
	
============================================
Section 4 - Lecture 42: Introducing Redux

create-react-app reminderPro

npm install redux react-redux --save

The very first principles of redux. We have one huge store holding our application, is a global object that holds the application.
--STORE-- It allows state to be updated by dispatch actions.

Actions are just plain javascript object like this:

{
    type: ADD_REMINDER, // 'type' property tells reader what kind of action is being performed
    payload: data // 'payload' key which holds all the data or some other key which holds all the necessary info within the javascript object which you use that action to update the store
}

Action creator which is more like a function which returns the javascript object action itself

function() {
  return {
    type: ADD_REMINDER,
    payload: data
  }
}

============================================
Lecture 44: Providing a Store and Introduction Reducers

What the state is for global application but we need to do is set up a provider component from 'react-redux' that were passed down at the store to our entire application.

what a reducer actually means in terms (điều kiện) of redux so that we can possible into the store. --REDUCERS--What reducers do is simply take the state in action and return to state.
So reducers based on the action will modify the state in a pure way.

There's a huge rule to know with reducers you must never take the state directly. This will cause hug performance errors. 
--REDUCERS--So what we do is take the state and return entirely new instances of it rather than simply modifying it.

** REMEMBER to reload your development server when you create reducers.

Q&A ============================================

At the end of the video, why do we import reducer from './reducers'?
Daniel · Lecture 44 · 6 months ago

The only file in that folder is index.js and the only object being exported from that file is reminders.  There is no mention of the term reducer anywhere, so why is this term used and why does it work?

 David — Instructor
· 6 months ago Answer

It's convention to split the reducers, actions, constants, etc. If you import from just a folder with no file extension specified, react will look for the 'index.js' file in that folder as the default file.

Providing a Store and Introducing Reducers
abbas ashraf · Lecture 44 · 5 months ago

    const reminder = (action) => {
    return {
    text: action.text
    }
    }


whats the meaning of action.text?

and where is come ?

Action is an object, and text is a property within that object. It comes when a function passes an object to the reminder action creator.

============================================

*** IMPORTANT *** Coding Break: the Three Steps to Redux
Section 4, Lecture 45

Coding Break: The Three Steps to Redux

Here’s another optional coding break. Skip this article if you’re biting your nails to keep building ReminderPro.

I can’t believe it, but I’m about to give away my secret formula for understanding redux!

    1. Add a constant to the constants file. Something like `const GREAT_COURSE = ‘GREAT_COURSE`

    2. Add an action creator to the actions folder. Return an action JavaScript object with a type of the constant you created.

    3. Add a reducer to the reducers folder that handles this action creator.

It’s really that simple! So just follow these three steps and you’ll stay ‘A-Ok’ whenever you have to deal with Redux.

Regardless, we all love something: engineering, development, or entrepreneurship. But the one constant is that we all take action in order to succeed. Otherwise, our lives would be reduced to ‘normalcy.’

Lastly, all I have to say is Redux.


============================================
Lecture 46 - Mapping Dispatch to Props and Binding Action Creators

We can move onto connecting our component to our store and the action creator, we create to connect to our store in this component

The beauty of redux gives us so much power because we can access this part of our global state in any future component that we create.
We simply need to connet our component 'App' to the global state in a similar manner. And then we can bind any action creat or redefined in the future in order to update the state of all our components and our entire application

export default connect(mapStateToProps, { addReminder })(App)


============================================
Lecture 50 - Reducing List Component

removeById state question
Calvin · Lecture 50 · 6 months ago

in the reducer file, 'const removeById = (state = [] id)...' how does the app know what items are in the state when in the const it is set to equal an empty array?
David Katz
David — Instructor
· 6 months ago

It's not always an empty array. This assignment in the parameter only happens if the passed array parameter is null or empty. Since state is usually not empty, the items array is usually valid.
Mark as helpful (1) 


*** INSTAL*** npm install moment --save

npm install sfcookies


*** You do so with the mapStateToProps function. This is redux's way of taking its state and mapping it onto a specific component's 

// Challenges

npm install dateformat

https://www.w3schools.com/js/js_date_formats.asp

ISO Dates (Date-Time)
ISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ):

============================================
DEPLOY APP TO HEROKU
Z:\deployheroku\reminderpro>heroku git:remote -a cuongreminderpro
set git remote heroku to https://git.heroku.com/cuongreminderpro.git

https://cuongreminderpro.herokuapp.com/

============================================

GOAL COACH

create-react-app goalcoach

npm install redux react-redux react-router firebase --save

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css">


 


